document.addEventListener('DOMContentLoaded', async () => {
    const token = localStorage.getItem('jwtToken');
    if (!token) {
        window.location.href = '/auth.html';
        return;
    }

    await loadUserProfile();
    const currentUserRole = getUserRoleFromToken();
    loadPolls(currentUserRole);

    function addAnswer(button) {
        const answersContainer = button.previousElementSibling;
        const answerInput = document.createElement('input');
        answerInput.type = 'text';
        answerInput.className = 'answer-text';
        answerInput.placeholder = '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞';
        answersContainer.appendChild(answerInput);
    }

    function addQuestion() {
        const container = document.getElementById('questions-container');
        const questionCount = document.querySelectorAll('.question-block').length + 1;
        const questionDiv = document.createElement('div');
        questionDiv.className = 'question-block';
        questionDiv.innerHTML = `
            <h3>–í–æ–ø—Ä–æ—Å ${questionCount}</h3>
            <input type="text" class="question-text" placeholder="–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞" required>
            <div class="answers-container">
                <input type="text" class="answer-text" placeholder="–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞" required>
            </div>
            <button type="button" class="add-answer-btn" onclick="addAnswer(this)">+ –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç</button>
        `;
        container.appendChild(questionDiv);
    }

    function isValidYouTubeUrl(url) {
        const youtubeRegex = /^(https?\:\/\/)?(www\.youtube\.com|youtu\.be)\/.+$/;
        return youtubeRegex.test(url);
    }

    async function createPoll() {
        const title = document.getElementById('poll-title').value.trim();
        const youtubeUrl = document.getElementById('youtube-url').value.trim();
        const questionBlocks = document.querySelectorAll('.question-block');
        const questions = [];

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if (!title) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞');
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è YouTube URL
        if (youtubeUrl && !isValidYouTubeUrl(youtubeUrl)) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π YouTube URL');
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
        let hasValidQuestions = false;
        for (const block of questionBlocks) {
            const questionText = block.querySelector('.question-text').value.trim();
            const answerInputs = block.querySelectorAll('.answer-text');
            const answers = [];

            answerInputs.forEach(input => {
                const answerText = input.value.trim();
                if (answerText) {
                    answers.push(answerText);
                }
            });

            if (questionText && answers.length > 0) {
                questions.push({ text: questionText, answers });
                hasValidQuestions = true;
            }
        }

        if (!hasValidQuestions) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤');
            return;
        }

        const pollData = { title, youtubeUrl, questions };

        try {
            const response = await fetch('http://localhost:8080/api/polls', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`,
                },
                body: JSON.stringify(pollData),
            });

            const responseText = await response.text();

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: ' + responseText);
            }

            try {
                const responseJson = JSON.parse(responseText);
                alert('–û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
            } catch (e) {
                alert('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON: ' + responseText);
            }

            document.getElementById('poll-title').value = '';
            document.getElementById('youtube-url').value = '';
            document.getElementById('questions-container').innerHTML = '';
            loadPolls(currentUserRole); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤
        } catch (error) {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        }
    }

    function logout() {
        localStorage.removeItem('jwtToken');
        window.location.href = '/auth.html';
    }

    window.addAnswer = addAnswer;
    window.addQuestion = addQuestion;
    window.createPoll = createPoll;
    window.logout = logout;

    async function loadUserProfile() {
        const token = localStorage.getItem('jwtToken');
        const userProfileContainer = document.getElementById('username-display');

        try {
            const response = await fetch('http://localhost:8080/api/user/profile', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                },
            });

            if (!response.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: ' + response.status + ' ' + response.statusText);
            }

            if (response.status === 401) {
                window.location.href = '/auth.html';
            }

            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                const user = await response.json();
                userProfileContainer.textContent = user.username;
            } else {
                const text = await response.text();
                throw new Error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON: ' + text);
            }
        } catch (error) {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: ' + error.message);
        }
    }

    function getUserRoleFromToken() {
        const token = localStorage.getItem('jwtToken');
        if (!token) return null;

        const payload = JSON.parse(atob(token.split('.')[1]));
        return payload.role || (payload.authorities ? payload.authorities[0] : null);
    }

    async function deletePoll(pollId) {
        const token = localStorage.getItem('jwtToken');
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å?')) return;

        try {
            const response = await fetch(`http://localhost:8080/api/polls/${pollId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞');
            }

            alert('–û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
            loadPolls(getUserRoleFromToken());
        } catch (error) {
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }

    async function loadPolls(currentUserRole) {
        const token = localStorage.getItem('jwtToken');
        const pollsContainer = document.getElementById("polls-container");

        try {
            const response = await fetch('http://localhost:8080/api/polls', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + token
                }
            });

            const rawResponse = await response.text();
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ä–æ—Å–æ–≤: ${response.status} ${response.statusText}`);
            }

            let polls;
            try {
                polls = JSON.parse(rawResponse);
            } catch (e) {
                throw new Error("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON: " + rawResponse);
            }

            pollsContainer.innerHTML = "";

            polls.forEach(poll => {
                const videoId = poll.youtubeVideoId || "";
                const previewImageUrl = videoId
                    ? `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`
                    : "https://placehold.co/320x180?text=No+Preview";

                const isAdmin = currentUserRole === "ADMIN";
                const deleteButtonHTML = isAdmin
                    ? `<button class="delete-btn" data-poll-id="${poll.id}">üóë –£–¥–∞–ª–∏—Ç—å</button>`
                    : '';

                const pollCard = document.createElement("div");
                pollCard.className = "poll-card";
                pollCard.innerHTML = `
                    <h3>${poll.title}</h3>
                    <p class="poll-author">–ê–≤—Ç–æ—Ä: ${poll.user?.username || 'Unknown User'}</p>
                    <img src="${previewImageUrl}" alt="YouTube Preview" class="youtube-preview"/>
                    <a href="/poll.html?pollId=${poll.id}">–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø—Ä–æ—Å—É</a>
                    ${deleteButtonHTML}
                `;

                if (isAdmin) {
                    pollCard.querySelector('.delete-btn').addEventListener('click', () => {
                        deletePoll(poll.id);
                    });
                }

                pollsContainer.appendChild(pollCard);
            });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ä–æ—Å–æ–≤:", error);
        }
    }

    async function extractVideoIdFromUrl(url) {
        try {
            const response = await fetch(`http://localhost:8080/api/youtube/extract-id?url=${encodeURIComponent(url)}`);
            if (!response.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å video ID');
            }
            return await response.text();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ ID: ', error);
            return '';
        }
    }

    const showFormButton = document.getElementById('show-form-btn');
    const pollCreationSection = document.getElementById('poll-creation-section');

    showFormButton.addEventListener('click', () => {
        pollCreationSection.style.display =
            pollCreationSection.style.display === 'none' || pollCreationSection.style.display === ''
                ? 'block'
                : 'none';
    });
});